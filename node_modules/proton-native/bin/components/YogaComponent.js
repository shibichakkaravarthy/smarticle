"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var yoga = require("yoga-layout-prebuilt");
var yogaHelper_1 = require("../utils/yogaHelper");
exports.YogaComponent = function (element, postApplyYoga, standardMeasure) {
    if (postApplyYoga === void 0) { postApplyYoga = null; }
    if (standardMeasure === void 0) { standardMeasure = false; }
    var config = yoga.Config.create();
    //config.setPrintTreeFlag(true);
    var node = yoga.Node.createWithConfig(config);
    var f = { f: function () { } };
    var oldLayout = {};
    var applyYogaStyle = function (style) {
        for (var key in style) {
            var transformer = yogaHelper_1.getYogaValueTransformer(key);
            var setFn = node[transformer.functionName];
            if (setFn) {
                var value = style[key];
                var args = transformer.transform(value);
                setFn.apply(node, args);
            }
        }
    };
    var applyYoga = function (root, func) {
        f.f = func;
        if (root) {
            node.calculateLayout(root.w, root.h);
        }
        var layout = node.getComputedLayout();
        var simpleLayout = {
            width: layout.width,
            height: layout.height,
            left: layout.left,
            top: layout.top
        };
        var shouldUpdate = false;
        for (var prop in simpleLayout) {
            if (simpleLayout[prop] !== oldLayout[prop]) {
                shouldUpdate = true;
            }
        }
        if (!shouldUpdate)
            return;
        element.resize(layout.width, layout.height);
        element.move(layout.left, layout.top);
        if (postApplyYoga) {
            postApplyYoga(layout);
        }
        Object.assign(oldLayout, simpleLayout);
    };
    if (standardMeasure) {
        var measure_1 = function () {
            return {
                height: element.minSize().h,
                width: element.minSize().w
            };
        };
        node.setMeasureFunc(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return measure_1.apply(void 0, args);
        });
    }
    return {
        applyYogaStyle: applyYogaStyle,
        applyYoga: applyYoga,
        node: node,
        f: f
    };
};
