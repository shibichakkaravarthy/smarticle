"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var devtools_1 = require("../devtools");
var Container_1 = require("./Container");
var index_1 = require("../backends/index");
exports.default = (function (props) {
    var propTypes = {};
    var defaultProps = {};
    var AppElement = index_1.getBackend()["AppElement"];
    var element = new AppElement();
    props = propChecker_1.default(props, propTypes, defaultProps, "Root");
    var containerProps = Container_1.Container(function () { }, function () { });
    var quit = function () {
        for (var i = 0; i < containerProps.children[0].children.length; i++) {
            containerProps.children[0].children[i].element.close();
        }
        devtools_1.disconnectDevtools();
    };
    var interval = setInterval(function () {
        for (var i = 0; i < containerProps.children[0].children.length; i++) {
            var closed_1 = containerProps.children[0].children[i].element.getClosed();
            if (!closed_1) {
                element.runLoop();
                return;
            }
        }
        quit();
        clearInterval(interval);
    }, 1); // fix this
    var traverseYoga = function (host) {
        var queue = [host];
        while (queue.length) {
            var next = queue.pop();
            if (next && next.applyYoga) {
                var root = null;
                if (next.parent && next.parent.applyYoga) {
                    root = null;
                }
                else if (typeof next.parent.element == "undefined" ||
                    typeof next.parent.element.height == "undefined") {
                    root = {
                        h: next.element.height(),
                        w: next.element.width()
                    };
                }
                else {
                    root = {
                        h: next.parent.element.height(),
                        w: next.parent.element.width()
                    };
                }
                next.applyYoga(root, function () { return traverseYoga(host); });
            }
            // if (next && next.type == 'fullText' && next.element.adjustSize) {
            //   next.element.adjustSize();
            // }
            if (next && next.children)
                queue.push.apply(queue, next.children);
        }
    };
    var afterCommit = function (host) {
        traverseYoga(host);
    };
    return __assign(__assign({}, containerProps), { element: element,
        afterCommit: afterCommit,
        interval: interval,
        quit: quit });
});
