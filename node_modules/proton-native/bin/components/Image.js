"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var Container_1 = require("./Container");
var PropTypes = require("prop-types");
var propsUpdater_1 = require("../utils/propsUpdater");
var YogaComponent_1 = require("./YogaComponent");
var node_fetch_1 = require("node-fetch");
var index_1 = require("../backends/index");
exports.default = (function (p) {
    var propTypes = {
        style: PropTypes.object,
        onResponderGrant: PropTypes.func,
        onResponderRelease: PropTypes.func,
        resizeMode: PropTypes.oneOf([
            "cover",
            "contain",
            "stretch",
            "repeat",
            "center"
        ]),
        source: PropTypes.object
    };
    var defaultProps = {
        style: {},
        onResponderGrant: function () { },
        onResponderRelease: function () { }
    };
    var ImageElement = index_1.getBackend()["ImageElement"];
    var element = new ImageElement();
    var props = __assign({}, p);
    props = propChecker_1.default(props, propTypes, defaultProps, "Image");
    var resizeMode = { r: props.resizeMode || "stretch" };
    var pixSize = { width: 0, height: 0, resizeMode: resizeMode.r };
    var yogaProps = YogaComponent_1.YogaComponent(element, function (layout) {
        pixSize.width = layout.width;
        pixSize.height = layout.height;
        pixSize.resizeMode = resizeMode.r;
        if (!element.isNull())
            element.scaleImage(layout.width, layout.height, resizeMode.r);
    });
    var handlers = {
        onResponderGrant: props.onResponderGrant,
        onResponderRelease: props.onResponderRelease
    };
    element.mousePressEvent(function () {
        handlers.onResponderGrant();
    });
    element.mouseReleaseEvent(function () {
        handlers.onResponderRelease();
    });
    var containerProps = Container_1.Container(function (child) {
        child.element.setParent(element);
        if (child.node) {
            yogaProps.node.insertChild(child.node, yogaProps.node.getChildCount());
        }
    }, function (child) {
        child.element.del();
        if (child.node) {
            yogaProps.node.removeChild(child.node);
        }
    }, function (child, i) {
        child.element.setParent(element);
        if (child.node) {
            yogaProps.node.insertChild(child.node, i);
        }
    });
    var updateProps = propsUpdater_1.default([handlers, "onResponderGrant", "onResponderRelease"], {
        style: function (style) {
            if (style.resizeMode) {
                resizeMode.r = style.resizeMode;
            }
            element.setStyleSheet(style);
            yogaProps.applyYogaStyle(style);
        },
        resizeMode: function (r) {
            resizeMode.r = r;
        },
        source: function (source) {
            if (source.uri) {
                // need to figure out what width and height work with, and also work with arrays
                if (source.uri.startsWith("http://") ||
                    source.uri.startsWith("https://") ||
                    source.uri.startsWith("ftp://")) {
                    node_fetch_1.default(source.uri, {
                        method: source.method || "GET",
                        body: source.body,
                        headers: source.headers
                    })
                        .then(function (out) { return out.buffer(); })
                        .then(function (out) {
                        element.setFromData(out);
                        element.scaleImage(pixSize.width, pixSize.height, pixSize.resizeMode);
                    })
                        .catch(function (err) { return console.log(err); });
                }
                else {
                    element.setFromUri(source.uri);
                    element.scaleImage(pixSize.width, pixSize.height, pixSize.resizeMode);
                }
            }
        }
    });
    updateProps(props);
    return __assign(__assign(__assign({}, containerProps), yogaProps), { element: element,
        updateProps: updateProps,
        resizeMode: resizeMode });
});
