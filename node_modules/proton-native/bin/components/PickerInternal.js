"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var Container_1 = require("./Container");
var PropTypes = require("prop-types");
var propsUpdater_1 = require("../utils/propsUpdater");
var YogaComponent_1 = require("./YogaComponent");
var index_1 = require("../backends/index");
exports.default = (function (p) {
    var propTypes = {
        style: PropTypes.object,
        onValueChange: PropTypes.func,
        selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
    };
    var defaultProps = {
        style: {},
        onValueChange: function () { },
        selectedValue: ""
    };
    var PickerElement = index_1.getBackend()["PickerElement"];
    var element = new PickerElement();
    var items = {};
    var itemList = [];
    var props = __assign({}, p);
    props = propChecker_1.default(props, propTypes, defaultProps, "Picker");
    var yogaProps = YogaComponent_1.YogaComponent(element, undefined, true);
    var handlers = {
        onValueChange: props.onValueChange
    };
    element.activatedEvent(function (text) {
        handlers.onValueChange(items[text] || text, element.currentIndex());
    });
    var containerProps = Container_1.Container(function (child) {
        if (!child.props)
            return;
        element.addItem(child.props.label);
        itemList.push(child.props.label);
        items[child.props.label] = child.props.value || child.props.label;
    }, function (child) {
        if (!child.props)
            return;
        element.removeItem(itemList.indexOf(child.props.label));
        delete items[child.props.label];
        itemList.splice(itemList.indexOf(child.props.label), 1);
    }, function (child, i) {
        if (!child.props)
            return;
        element.insertItem(i, child.props.label);
        items[child.props.label] = child.props.value || child.props.label;
        itemList.splice(i, 0, child.props.label);
    });
    var updateProps = propsUpdater_1.default([handlers, "onValueChange"], {
        style: function (style) {
            element.setStyleSheet(style);
            yogaProps.applyYogaStyle(style);
        },
        selectedValue: function (value) {
            element.setCurrentText(value);
        },
        children: function (children) {
            if (children.map(function (x) { return (x.props ? x.props.label : x); }).toString() ==
                itemList.toString())
                return;
            for (var i = itemList.length - 1; i >= 0; i--) {
                itemList.splice(i, 1);
                element.removeItem(i);
            }
            Object.keys(items).forEach(function (item) { return delete items[item]; });
            for (var i = 0; i < children.length; i++) {
                containerProps.appendChild(children[i]);
            }
            if (!children.length) {
                containerProps.appendChild(children);
            }
        }
    });
    updateProps(props);
    return __assign(__assign(__assign({}, containerProps), yogaProps), { element: element,
        updateProps: updateProps });
});
