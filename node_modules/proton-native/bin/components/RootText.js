"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var propsUpdater_1 = require("../utils/propsUpdater");
var PropTypes = require("prop-types");
var TextFuncs_1 = require("./TextFuncs");
var YogaComponent_1 = require("./YogaComponent");
var index_1 = require("../backends/index");
exports.default = (function (p) {
    var propTypes = {
        style: PropTypes.object
    };
    var defaultProps = {
        style: {}
    };
    var TextElement = index_1.getBackend()["TextElement"];
    var element = new TextElement();
    var props = __assign({}, p);
    props = propChecker_1.default(props, propTypes, defaultProps, "Text");
    var styleProp = { s: props.style };
    var yogaProps = YogaComponent_1.YogaComponent(element, undefined, true);
    var updateProps = propsUpdater_1.default({
        style: function (style) {
            styleProp.s = style;
            if (style.textAlign) {
                // TODO: Need to translate to Qt text align
            }
            yogaProps.applyYogaStyle(style);
        }
    });
    var textProps = TextFuncs_1.TextFuncs(function (text) {
        element.setText(text);
        yogaProps.node.markDirty();
        yogaProps.f.f && yogaProps.f.f();
    }, styleProp.s);
    updateProps(props);
    return __assign(__assign(__assign({}, textProps), yogaProps), { element: element,
        updateProps: updateProps, type: "fullText" });
});
