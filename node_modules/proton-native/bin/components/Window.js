"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var Container_1 = require("./Container");
var propsUpdater_1 = require("../utils/propsUpdater");
var render_1 = require("../render");
var PropTypes = require("prop-types");
var YogaComponent_1 = require("./YogaComponent");
var index_1 = require("../backends/index");
exports.default = (function (p) {
    var propTypes = {
        style: PropTypes.object,
        onResize: PropTypes.func
    };
    var defaultProps = {
        style: {},
        onResize: function () { }
    };
    var backend = index_1.getBackend();
    var WindowElement = backend["WindowElement"];
    var desktopSize = backend["desktopSize"];
    var element = new WindowElement();
    var props = __assign({}, p);
    props = propChecker_1.default(props, propTypes, defaultProps, "Window");
    var yogaProps = YogaComponent_1.YogaComponent(element);
    var handlers = {
        onResize: props.onResize
    };
    element.resizeEvent(function (w, h) {
        render_1.ROOT_NODE.afterCommit(render_1.ROOT_NODE);
        handlers.onResize({ w: w, h: h });
    });
    var percentToSize = function (width, height) {
        var newWidth = width;
        var newHeight = height;
        if (typeof width == "string" && width[width.length - 1] == "%") {
            newWidth = desktopSize().w * (parseInt(width, 10) / 100.0);
        }
        if (typeof height == "string" && height[height.length - 1] == "%") {
            newHeight = desktopSize().h * (parseInt(height, 10) / 100.0);
        }
        return { w: newWidth, h: newHeight };
    };
    var updateProps = propsUpdater_1.default([handlers, "onResize"], {
        style: function (style) {
            var width = style.width;
            var height = style.height;
            delete style.width; // cause we don't want to resize with yoga, only with our pipeline
            delete style.height;
            element.setStyleSheet(style);
            yogaProps.applyYogaStyle(style);
            var size = percentToSize(width, height);
            //console.log("My size", size, width, height);
            if (size.h && size.w) {
                element.resize(size.w, size.h);
            }
            else if (size.w) {
                element.resize(size.w, element.height());
            }
            else if (size.h) {
                element.resize(element.width(), size.h);
            }
        }
    });
    var containerProps = Container_1.Container(function (child) {
        child.element.setParent(element);
        if (child.node) {
            yogaProps.node.insertChild(child.node, yogaProps.node.getChildCount());
        }
    }, function (child) {
        child.element.del();
        if (child.node) {
            yogaProps.node.removeChild(child.node);
        }
    }, function (child, i) {
        child.element.setParent(element);
        if (child.node) {
            yogaProps.node.insertChild(child.node, i);
        }
    });
    updateProps(props);
    return __assign(__assign(__assign({}, containerProps), yogaProps), { element: element,
        updateProps: updateProps });
});
