"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var propChecker_1 = require("../utils/propChecker");
var propsUpdater_1 = require("../utils/propsUpdater");
exports.default = (function (p) {
    var children = [];
    var propTypes = {};
    var defaultProps = {};
    var props = __assign({}, p);
    props = propChecker_1.default(props, propTypes, defaultProps, "App");
    var updateProps = propsUpdater_1.default({});
    var appendChild = function (child) {
        if (child.element) {
            children.push(child);
            child.element.show();
        }
    };
    var insertChild = function (child, beforeChild) {
        if (children.includes(child)) {
            throw new Error("Can't add the same window twice");
        }
        if (!children.includes(beforeChild)) {
            throw new Error("Relative element does not exist");
        }
        var i = children.indexOf(beforeChild);
        children.splice(0, i, child);
        child.element.show();
    };
    var removeChild = function (child) {
        if (!children.includes(child)) {
            throw new Error("Can't remove a child that's not added");
        }
        var i = children.indexOf(child);
        children.splice(i, 1)[0].element.del();
    };
    updateProps(props);
    return {
        appendChild: appendChild,
        insertChild: insertChild,
        removeChild: removeChild,
        updateProps: updateProps,
        children: children
    };
});
