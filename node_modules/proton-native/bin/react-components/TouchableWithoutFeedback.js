"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var TouchableWithoutFeedback = /** @class */ (function (_super) {
    __extends(TouchableWithoutFeedback, _super);
    function TouchableWithoutFeedback() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.pressedDown = false;
        _this.startedTime = 0;
        return _this;
    }
    TouchableWithoutFeedback.prototype.onDown = function () {
        this.pressedDown = true;
        this.startedTime = new Date().getTime();
    };
    TouchableWithoutFeedback.prototype.onUp = function () {
        if (this.pressedDown) {
            var diff = new Date().getTime() - this.startedTime;
            if (diff > 500) {
                this.props.onLongPress
                    ? this.props.onLongPress()
                    : this.props.onPress();
            }
            else {
                this.props.onPress();
            }
            this.pressedDown = false;
        }
    };
    TouchableWithoutFeedback.prototype.render = function () {
        var _this = this;
        var child = React.Children.only(this.props.children);
        var children = child.props.children;
        return React.cloneElement(child, {
            onResponderGrant: function () { return _this.onDown(); },
            onResponderRelease: function () { return _this.onUp(); },
            children: children
        });
    };
    TouchableWithoutFeedback.defaultProps = {
        onPress: function () { },
        onLongPress: function () { }
    };
    TouchableWithoutFeedback.propTypes = {
        onPress: PropTypes.func,
        onLongPress: PropTypes.func
    };
    return TouchableWithoutFeedback;
}(React.Component));
exports.default = TouchableWithoutFeedback;
