"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var __1 = require("..");
var PropTypes = require("prop-types");
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Button.prototype.render = function () {
        return (React.createElement(__1.TouchableOpacity, { onPress: this.props.onPress, style: __assign(__assign({}, styles.button), { backgroundColor: this.props.color }) },
            React.createElement(__1.Text, { style: styles.text }, this.props.title.toUpperCase())));
    };
    Button.defaultProps = {
        title: "",
        onPress: function () { },
        color: "#2196F3"
    };
    Button.propTypes = {
        title: PropTypes.string.isRequired,
        onPress: PropTypes.func.isRequired,
        color: PropTypes.string
    };
    return Button;
}(React.Component));
exports.default = Button;
var styles = {
    button: {
        borderRadius: 2,
        justifyContent: "center",
        alignItems: "center",
        padding: 8
    },
    text: {
        color: "white",
        fontWeight: "500",
        fontSize: 18
    },
    buttonDisabled: {
        elevation: 0,
        backgroundColor: "#dfdfdf"
    },
    textDisabled: {
        color: "#a1a1a1"
    }
};
