"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var __1 = require("..");
var PropTypes = require("prop-types");
var Color = require("color");
var TouchableHighlight = /** @class */ (function (_super) {
    __extends(TouchableHighlight, _super);
    function TouchableHighlight() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // TODO: Add animation
        _this.pressedDown = false;
        _this.startedTime = 0;
        _this.state = {
            extraChildStyle: null,
            extraUnderlayStyle: null
        };
        return _this;
    }
    TouchableHighlight.prototype.onDown = function () {
        this.pressedDown = true;
        this.startedTime = new Date().getTime();
        var child = React.Children.only(this.props.children);
        this.setState({
            extraChildStyle: {
                backgroundColor: Color(child.props.style.backgroundColor)
                    .alpha(this.props.activeOpacity)
                    .string()
            },
            extraUnderlayStyle: {
                backgroundColor: this.props.underlayColor
            }
        });
    };
    TouchableHighlight.prototype.onUp = function () {
        if (this.pressedDown) {
            var diff = new Date().getTime() - this.startedTime;
            if (diff > 500) {
                this.props.onLongPress
                    ? this.props.onLongPress()
                    : this.props.onPress();
            }
            else {
                this.props.onPress();
            }
            this.pressedDown = false;
            this.setState({ extraChildStyle: null, extraUnderlayStyle: null });
        }
    };
    TouchableHighlight.prototype.render = function () {
        var _this = this;
        var child = React.Children.only(this.props.children);
        return (React.createElement(__1.View, __assign({}, this.props, { style: __assign(__assign({}, this.props.style), (this.state.extraUnderlayStyle || {})), onResponderGrant: function () { return _this.onDown(); }, onResponderRelease: function () { return _this.onUp(); } }), React.cloneElement(child, {
            style: __assign(__assign({}, child.props.style), (this.state.extraChildStyle || {}))
        })));
    };
    TouchableHighlight.defaultProps = {
        activeOpacity: 0.85,
        underlayColor: "black",
        style: {},
        onPress: function () { },
        onLongPress: function () { }
    };
    TouchableHighlight.propTypes = {
        activeOpacity: PropTypes.number,
        underlayColor: PropTypes.string,
        style: PropTypes.object,
        onPress: PropTypes.func,
        onLongPress: PropTypes.func
    };
    return TouchableHighlight;
}(React.Component));
exports.default = TouchableHighlight;
