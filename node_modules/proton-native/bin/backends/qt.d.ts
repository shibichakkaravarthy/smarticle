/// <reference types="node" />
interface Size {
    w: number;
    h: number;
}
export declare function desktopSize(): Size;
export declare abstract class BaseElement {
    element: any;
    mousePressEvent(func: () => void): void;
    mouseReleaseEvent(func: () => void): void;
    setStyleSheet(obj: object): void;
    setParent(elem: BaseElement): void;
    del(): void;
    resize(width: number, height: number): void;
    move(left: number, top: number): void;
    minSize(): Size;
    show(): void;
    close(): void;
    width(): number;
    height(): number;
}
export declare class ImageElement extends BaseElement {
    pixElement: any;
    constructor();
    setFromData(data: Buffer): void;
    setFromUri(uri: string): void;
    scaleImage(width: number, height: number, mode: "cover" | "contain" | "stretch" | "center" | "repeat"): void;
    isNull(): boolean;
}
export declare class WindowElement extends BaseElement {
    constructor();
    resizeEvent(func: (width: number, height: number) => void): void;
    getClosed(): boolean;
}
export declare class ViewElement extends BaseElement {
    constructor();
}
export declare class PickerElement extends BaseElement {
    constructor();
    activatedEvent(func: (text: string) => void): void;
    addItem(label: string): void;
    removeItem(index: number): void;
    insertItem(index: number, label: string): void;
    setCurrentText(label: string): void;
    currentIndex(): number;
}
export declare class AppElement {
    element: any;
    constructor();
    runLoop(): void;
}
export declare class TextElement extends BaseElement {
    constructor();
    setText(text: string): void;
}
export declare class TextInputElement extends BaseElement {
    constructor(multi: boolean);
    textChangedEvent(func: (newText: string) => void): void;
    setText(text: string): void;
}
export declare class ButtonElement extends BaseElement {
    constructor();
    buttonReleasedEvent(func: () => void): void;
    setText(text: string): void;
}
export {};
