interface Size {
    w: number;
    h: number;
}
export declare function desktopSize(): Size;
export declare abstract class BaseElement {
    element: any;
    records: any;
    makeRecords(funcs: string[]): any;
    applyRecords(): void;
    checkFakeParent(obj: BaseElement): boolean;
    mousePressEvent(func: () => void): void;
    mouseReleaseEvent(func: () => void): void;
    setStyleSheet(obj: any): void;
    resize(width: number, height: number): void;
    move(left: number, top: number): void;
    minSize(): Size;
    show(): void;
    close(): void;
    width(): number;
    height(): number;
}
export declare class WindowElement extends BaseElement {
    constructor();
    resizeEvent(func: (width: number, height: number) => void): void;
    getClosed(): boolean;
}
export declare class ViewElement extends BaseElement {
    constructor();
    setParent(obj: BaseElement): void;
}
export declare class AppElement {
    element: any;
    constructor();
    runLoop(): void;
}
export declare class ButtonElement extends BaseElement {
    constructor();
    setParent(obj: BaseElement): void;
    buttonReleasedEvent(func: () => void): void;
    setText(text: string): void;
}
export {};
